cheatsheet:
https://github.com/wsargent/docker-cheat-sheet

reference:
https://docs.docker.com/reference/commandline/cli/

WhatsNew:
https://github.com/docker/docker/blob/master/CHANGELOG.md


install:
curl -l https://get.docker.com/builds/Windows/x86_64/docker-1.6.0.exe > /usr/bin/docker-1.6.0

old:
https://get.docker.com/builds/Windows/x86_64/docker-1.8.1.exe
https://get.docker.com/builds/Windows/x86_64/docker-1.7.0.exe
https://get.docker.com/builds/Windows/x86_64/docker-1.6.2.exe
https://get.docker.com/builds/Windows/x86_64/docker-1.6.0.exe
curl -L https://get.docker.com/builds/Linux/x86_64/docker-1.6.0 > ~/docker-1.6.0

Daemon
http://stackoverflow.com/questions/31201846/how-to-use-docker-java-api-to-connect-docker
/usr/bin/docker -d -H fd:// -H tcp://0.0.0.0:2375
curl http://localhost:2375/info


Articles:
http://paislee.io/how-to-automate-docker-deployments/
http://www.netpatch.ru/research/docker/2014/03.24-linux-docker-practical-guide.html
http://www.radcortez.com/get-into-docker/


IMAGES:
list images:
sudo docker images -a --no-trunc

images location:
Actually, Docker images are stored in two files as shown by following command
$ docker info
Data file: /var/lib/docker/devicemapper/devicemapper/data
Metadata file: /var/lib/docker/devicemapper/devicemapper/metadata

http://comments.gmane.org/gmane.comp.sysutils.docker.user/4451
http://blog.thoward37.me/articles/where-are-docker-images-stored/
http://www.projectatomic.io/docs/docker-storage-recommendation/
http://www.centurylinklabs.com/optimizing-docker-images/?hvid=4wO7Yt
http://stackoverflow.com/questions/19234831/where-are-docker-images-stored-on-the-host-machine
http://stackoverflow.com/questions/26166550/set-docker-opts-in-centos

https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Resource_Management_and_Linux_Containers_Guide/part-Linux_Containers.html

/etc/default/docker:
DOCKER_OPTS="-g /path/to/docker/data"

/usr/lib/systemd/system/docker.service
ExecStart=/usr/bin/docker -g /data/wrk/dockerimg -d -H fd://

--graph
default is /var/lib/docker

images building:
sudo docker build [options] .
# -t="<tag>"
# --force-rm
# --force-rm=true --rm=true

Also, since the Dockerfile is put on the project root,
it'll tar up the whole project and send to the docker deamon while we only need the fat jar!
to avoid that, add .dockerignore to your project root.

images cleanin up:
http://blog.yohanliyanage.com/2015/05/docker-clean-up-after-yourself/
docker rm -v $(docker ps -a -q -f status=exited)
(alias doc-rmc)
docker rmi $(docker images -q -f "dangling=true")
(alias doc-rmd)

# Delete all images
http://techoverflow.net/blog/2013/10/22/docker-remove-all-images-and-containers/
http://stackoverflow.com/questions/17665283/how-does-one-remove-an-image-in-docker
http://jimhoskins.com/2013/07/27/remove-untagged-docker-images.html

sudo docker rmi -f $(sudo docker images -q)


CONTAINERS:

running:
sudo docker run -ti --rm=true <img> <cmd>
    -e "varname=value"

# Delete all containers
sudo docker rm -f $(sudo docker ps -aq)


REST API:
https://docs.docker.com/reference/api/docker_remote_api/
http://www.virtuallyghetto.com/2014/07/quick-tip-how-to-enable-docker-remote-api.html

aliases:
alias dksvccfg='sudo vim /usr/lib/systemd/system/docker.service'
alias dkrst='sudo systemctl restart docker'
alias dkstop='sudo systemctl stop docker'
alias dkstart='sudo systemctl start docker'
alias dkstatus='sudo systemctl status docker'
alias dkbld='sudo docker build --force-rm=true'


inspecting
docker inspect <container>


SAMPLES:
#spikes/max/builder
https://github.com/gregwebs/ghc-docker-dev/blob/master/Dockerfile
