Presentations:
http://www.slideshare.net/chef-software/chef-for-beginners-module-5-61251285
https://speakerdeck.com/nathenharvey/intro-to-chef-scale12x

ChefDK
https://downloads.chef.io/chef-dk/
https://aur.archlinux.org/packages/chef-dk/


chef-apply:
    applies individual resources, does not work with cookbooks
    https://docs.chef.io/ctl_chef_apply.html

    -e "package 'nano'"
        execute ad-hoc resource
    res-file.rb
        execute resources from <res-file.rb>

chef:
    generate
        create a new app, cookbook or component
    generate cookbook --help
    generate cookbook apache
    generate recipe apache server
    gem
    exec
    install
    push

chef-client:
    works with cookbooks
    is an agent, running at every node in order to bring it to the desired state
    https://docs.chef.io/chef_client.html

    --local-mode
        to avoid contacting chef-server
    -r "recipe[cookbook-name::recipe-name],..."
    -r "recipe[cookbook-name(::default)],..."
        run-list


cookbooks:
https://docs.chef.io/cookbooks.html

https://supermarket.chef.io/

- defines a scenario
- contains components to support that scenario:
    - recipes
    - attribute values
        https://docs.chef.io/attributes.html
    - file distributions
    - templates
    - extensions: libraries, definitions, custom resources

- Berksfile
- chefignore
- metadata.rb
   https://docs.chef.io/config_rb_metadata.html
    maintainer "Bob"
    maintainer_email "bob@gmail.com"
    description "A cookbook"
    version "2.0.1"
    depends "apache2", ">=0.99.4"
    depends "mysql", ">=1.0.5"
    recipe "A recipe", "blablabla"
- .kitchen.yml
    ---
    driver:
        name: vagrant # can also be docker
    provisioner:
        name: chef_zero
    platforms:
        - name: centos-7.1
        - name: ubuntu-14.04
    suites:
        - name: default
          run_list:
            - recipe[workstation::default]
          attributes:
- README.md
- recipes/
-- default.rb
-- vhosts.rb
    data_bag("vhosts").each do |site|
        site_data = data_bag_item("vhosts", site)
        site_name = site_data["id"]
        document_root = "/srv/apache/#{site_name}"
        template "/etc/httpd/conf.d/#{site_name}.conf" do
            ...
            variables(
                :port => site_data["port"]
            )
        end
    end
- spec/
-- spec_helper.rb
- attributes/
-- default.rb
    default['apache']['dir'] = "/etc/apache2"
    // use <%= node['apache']['dir'] %>
    // use <%= @site_name %>
- data_bags/
-- vhosts/
--- bears.json
        { "id": "bears", "port": 80 }
--- clowns.json
        { "id": "bears", "port": 81 }
- roles/ # https://docs.chef.io/roles.html
-- webserver.json
    {
        "name": "webserver",
        "default_attributes": {
            "apache": {
                "greeting": "SCaLE12x"
            }
        },
        "run_list": [
            "recipe[apache]",
            "recipe[apache::vhosts]"
        ]
    }
- test/
-- integration/
--- helpers/
---- serverspec/
----- spec_helper.rb
--- default/
---- serverspec/
----- default_spec.rb
        require 'spec_helper'
        describe 'workstation::default' do
            describe package('tree') do
                it { should be_installed }
            end
            describe file('/etc/passwd') do
                it { should be_file }
            end
            describe file('/etc/httpd/conf/httpd.conf') do
                its(:content) { should match /ServerName www.example.jp/ }
            end
            describe file('/etc/sudoers') do
                it { should be_owned_by 'root' }
            end
        end
        ...
        describe 'apache::default' do
            describe port(80) do
                it { should be_listening }
            end
            describe command('curl http://localhost') do
                its(:stdout) { should match /Hello, world!/ }
            end
        end

Kitchen:
    UT suite
    http://kitchen.ci/
    http://kitchen.ci/docs/getting-started/creating-cookbook
    http://kitchen.ci/docs/getting-started/writing_test

    http://serverspec.org/
    http://serverspec.org/resource_types.html

    https://relishapp.com/rspec/rspec-core/docs

    kitchen
        list
            list a test-matrix
        create
            [INSTANCE|REGEXP|all]
        converge
            [INSTANCE|REGEXP|all]
                apply a recipe to a vm
        verify
            [INSTANCE|REGEXP|all]
        destroy
            [INSTANCE|REGEXP|all]
        test
            [INSTANCE|REGEXP|all]

knife
    cookbook
        upload apache
        list
        create
        download
        metadata

        site
            install chef-sugar
                Berksfile:
                    cookbook 'shef-sugar'
                include_recipe 'chef-sugar::default'

                chef-client
                    ???
            list
            share
            unshare
            search
            download

    upload data_bags/vhosts
    diff cookbooks/apache
    node
        run list add/remove node1 "recipe[apache:vhosts]"
        run list add/remove node1 "role[webserver]"
            update the run list
        show nodename -r
    role from file webserver.json
    search node "role:webserver"
        webservers = search(:node, "role:webserver")
        # or
        search(:node, "role:webserver").each do |web|
            # stuff
        end
    search vhosts "port:81"

    bootstrap
        10.1.1.110 -r 'recipe[chef-client]' -x username -p password --sudo

Programming/Ruby:
    https://docs.chef.io/ruby.html

    https://speakerdeck.com/stevendanna/reprogramming-chef

    https://sethvargo.github.io/chef-sugar/
    https://github.com/sethvargo/chef-sugar
    https://rubygems.org/gems/chef-sugar/
    https://supermarket.chef.io/tools/chef-sugar
