https://internals.rust-lang.org/t/lang-team-minutes-const-generics/5090
https://www.reddit.com/r/rust/comments/65etpm/langteamminutes_const_generics/
http://manishearth.github.io/blog/2017/03/04/what-are-sum-product-and-pi-types/

2018
https://shingtaklam1324.github.io/number-theory-rust/
function overloading
http://casualhacks.net/blog/2018-03-10/exploring-function-overloading/
    https://habrahabr.ru/post/351570/

samples
http://rickyhan.com/jekyll/update/2018/12/03/make-burgers-context-free-grammar.html

type RuleID = usize;

struct Grammar<T: Debug + Clone + PartialEq + Hash + Eq> {
    start: String,
    rules: Vec<Rule<T>>,
    first_sets: Option<HashMap<String, HashSet<(Token<T>, Rule<T>)>>>,
}

struct Rule<T: Debug + Clone + PartialEq + Hash + Eq> {
    name: String,
    id: RuleID,
    production: Vec<Token<T>>,
}

enum Token<T: Debug + Clone + PartialEq + Hash + Eq> {
    Terminal(T),
    Epsilon,
    NonTerminal(String),
}
