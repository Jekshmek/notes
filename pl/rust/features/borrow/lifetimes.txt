articles:
https://dev.to/buntine/aha-understanding-lifetimes-in-rust
https://chrismorgan.info/blog/rust-ownership-the-hard-way.html

https://users.rust-lang.org/t/lifetime-specifier-question/6295/8

Deref-trait:
https://doc.rust-lang.org/std/ops/trait.Deref.html

samples:
http://rust.fastmail.com.user.fm/2017/02/rusty-buffers/

pub struct Buffer { vec: Vec<u8> }

impl Buffer {
    pub fn new() -> Buffer { Buffer { vec: Vec::new(), } }

    pub fn buf<'a: 'b, 'b>(&'a mut self, more: &'b [u8]) -> Buf<'b> {
        if self.vec.is_empty() {
            Buf::Empty(&mut self.vec, more)
        } else {
            self.vec.extend_from_slice(more);
            Buf::Some(&mut self.vec)
        }
    }
}

The lifetimes (<'a: 'b, 'b>) are a bit gnarly because the compiler must be told that
the returned Buf has the same lifetime as the input buffer
which may be shorter than the lifetime of the Buffer.

explanation
https://gist.github.com/eddyb/1ebf928307a44ea64f6e
'a is a lifetime parameter.
Generic functions and types in Rust can have both type parameters and lifetime paramters  
Lifetime parameters are used to track how long data behind references is valid for  
You need them when storing references in structures or enums that you define  
For example, holding a vector of string slices requires you to do the following:
    struct BagOfStrings<'a> { strings: Vec<&'a str> }
without the 'a parameter, Rust would not be able to distinguish between
    BagOfStrings<'static>
        which may contain only `&'static str` (e.g. string literals) and
    BagOfStrings<'some_stack_scope>
        which may have `&str`'s pointing into a `String` on the stack  

NLL (Non-lexical lifetimes)
http://smallcultfollowing.com/babysteps/blog/2016/04/27/non-lexical-lifetimes-introduction/
http://smallcultfollowing.com/babysteps/blog/2017/02/21/non-lexical-lifetimes-using-liveness-and-location/
http://smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/
