https://github.com/acdlite/recompose/blob/master/docs/API.md

compose

withState
    https://github.com/acdlite/recompose/blob/master/docs/API.md#withstate
    withState('isVisible', 'toggleVis', false)
        * (stateName) the state key isVisible,
        * (stateUpdaterName) a method to toggleVis,
        * (initialState) - false.

withHandlers
    https://github.com/acdlite/recompose/blob/master/docs/API.md#withhandlers
    create higher-order functions that accept a set of props and return a function handler

    withHandlers({
        toggleVisibility: ({ toggleVis, isVisible }) => {
            return (event) => {
                return toggleVis(!isVisible);
            };
        },
    })
    Handlers are passed to the base component as immutable props, whose identities are preserved across renders.
    This avoids a common pitfall where functional components create handlers inside the body of the function,
    which results in a new handler on every render and breaks downstream shouldComponentUpdate() optimizations that rely on prop equality.
    This is the main reason to use withHandlers to create handlers instead of using mapProps or withProps,
    which will create new handlers every time when it get updated.

withProps
    https://github.com/acdlite/recompose/blob/master/docs/API.md#withprops
    withProps(({ isVisible }) => {
        return {
            title  : isVisible ? 'This is the visible title' : 'This is the default title',
            message: isVisible ? 'Hello I am Visible'        : 'I am not visible yet, click the button!',
        };
    })

nest
    https://github.com/acdlite/recompose/blob/master/docs/API.md#nest
    Composes components by nesting each one inside the previous.
        https://medium.com/@abhiaiyer/top-5-recompose-hocs-1a4c9cc4566

    // Given components A, B, and C
    const ABC = nest(A, B, C)
    <ABC pass="through">Child</ABC>

    // Effectively the same as
    <A pass="through">
        <B pass="through">
            <C pass="through">
                Child
            </C>
        </B>
    </A>
    
mapProps
    map one props to another
mapAsyncProps
    ?
when
    ?
renderComponent
    ?
pipe/mapValue/enhance
    ?

branch
    https://github.com/acdlite/recompose/blob/master/docs/API.md#branch
    const cashOnDelivery = 'CASH_ON_DELIVERY';
    const enhance = branch(
      (props) => (props.paymentType === cashOnDelivery)
      renderComponent(CashScreen),
      renderNothing
    )

renderComponent
    https://github.com/acdlite/recompose/blob/master/docs/API.md#rendercomponent
    takes a component and returns an HOC version of it

renderNothing
    https://github.com/acdlite/recompose/blob/master/docs/API.md#rendernothing
    always renders null
