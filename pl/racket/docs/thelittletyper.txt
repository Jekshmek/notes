https://mitpress.mit.edu/books/little-typer

http://thelittletyper.com/
http://thelittletyper.com/errata.html
    38, 

http://davidchristiansen.dk/
http://davidchristiansen.dk/tutorials/
http://davidchristiansen.dk/tutorials/nbe/
https://corecursive.com/023-little-typer-and-pie-language/

Downloading repository
    https://github.com/the-little-typer/pie.git
dependencies of pie:
   todo-list
    https://github.com/david-christiansen/todo-list.git

#lang pie

2018
https://www.reddit.com/r/haskell/comments/9igdgx/the_little_typer_by_daniel_p_friedman_and_david/
2017
David Christiansen - A Little Taste of Types
    https://www.youtube.com/watch?v=3z9nISI4ppw

notes
expressions, that describe other expressions, such as Atom, are called types

A form of judgement is an observation with blank spaces in it:
1. ___ is a ___
2. ___ is the same ___ as ___
3. ___ is a type
4. ___ and ___ are the same types

Judgements are acts of knowing, and
believing is part of knowing

Some forms of judgement only make sense after an earlier judgement (pre-supposition)

The normal [form] of an expression is the most direct way of writing it
    Sameness is always according to a type

Sameness is always according to a type, so normal forms are also determined by a type

Normal forms of types:
Every expression that is a type has a normal form,
which is the most direct way of writing that type.
If two expressions are the same type,
then they have identical normal forms,
and if two types have identical normal forms,
then they are the same types
    - expr is a ___  (expr has a type of ___)

(claim one Nat)
(define one (add1 zero))

An expression with a constructor at the top is called a value
    - a value is not always normal

The c-tors of
    - Nat are "zero" and "add1"
    - Pair - "cons" 

In a value, the top constructor's arguments need not be normal
    - each expression has only one normal form


Evaluation is - finding a value that is the same as some staring exression

In Pie, everyting is an expression (even values)

! Definitions are forever !

! atoms are constructors (construct themselves),
    atoms are also values (of type Atom)

Pair, Nat and Atom - are type constructors (not a [value] constructors)

! car, however, is neigher a c-tor, nor a type c-tor
! car (and cdr) are eliminators

Constructors build values, and eliminators take apart values built by constructors

every lambda-expression is a value

! Applying a [lambda] function to arguments is the eliminator for functions

Alpha-conversion is renaming lambda-variables in a consistent way (per Alonzo Church) 

! The initial law of application:
if f is an
    (-> Y  X)
and arg is a
    Y
then (f arg) is an
    X.

! The initial first Commandment of lambda
Two lambda-expressions, that expect the same number of arguments are the same if their bodies are the same
after consistently renaming their variables (arguments)

! The initial second Commandment of lambda
if f is an (-> Y  X)
then f is the same (-> Y  X)
as
    (\ (y)
      (f y))
as long as y does not occur in f.

! The law of renaming variables
Consistently renaming variables can't change the meaning of anything.

! Neutral expressions - are not values and can not yet be evaluated due to a variable
    - (cdr x)  where x is a (Pair Nat Atom) is a neutral expression, because cdr is not a c-tor, but an elim
but
    - (cons y, 'rutabaga) is a value because by definition it has c-tor at the top

! If two expressions have identical eliminators at the top and all arguments to the eliminators are the same,
then the expressions are the same

! The Commandment of Neutral Expressions
Neutral expressions that are written identically are the same, no matter their type

! The Law and Commandment of define
Following
    (claim name X) and (define name expr)
if
    expr is an X [has type of X],
then
    name is an X [has type of X]
and
    name is the same X as expr.

! The seconce Commandment of cons
If p is a (Pair A D), then it is the same (Pair A D) as
    (cons (car p) (cdr p))

! Names in definitions
In Pie, only names that are not already used, whether for constructors, eliminators,
or previous definitions, can be used with claim or define.

Nat-eliminator:
(which-Nat target
    base
    step)

! Dim names
Unused names are written dimly, but they do need to be there

! The law or which-Nat
If target is a Nat, base is an X, and step is an
    (-> Nat
        X),
then
    (which-Nat target
        base
        step)
is an X.

! The first Commandment of which-Nat
If (which-Nat zero
    base
    step)
is an X, then it is the same X as base.

! The second Commandment of which-Nat
If (which-Nat (add1 n)
    base
    step)
is an X, then it is the same X as (step n).

! Type Values
An expression that is described by a type is a value when it has a "c-tor" at its top.
Similarly, an expression that is a type is a value when it has a "type c-tor" at its top.

Note: Type c-tors:
    Nat, Atom, Pair, ->, U

Note: The following expression is a type, but not a value
    (car (cons Atom 'prune))
    because car is neither c-tor, not a type c-tor

Judging that expr is a type requires knowing its c-tors.
But the meaning of U is not given by knowing all the type c-tors,
because new types can be introduced

! Every U Is a Type
Every expression, described by U is a type,
but not every type is described by U.

Sample:
(clame Pear
    U)
(define Pear
    (Pair Nat Nat))

Pear is not a value (names, defined with "define", are nither c-tor, nor type-c-tors)

! Definitions are unnecessary
Everything can be done without definitions, but they do improve understanding


### Recess: A Forkful of Pie

the-expressions are also referred as "type annotations"

! The law of "the"
If X is a type and e is an X, then
    (the X e)
is an X.

! The Commandment of "the"
If X is a type and e is an X, then
    (the X e)
is the same X as e.

Note: U is a type, but it does not have a type
    when expression is a type, but does not have its own type,
    Pie replies with just its normal form
Other such samples ar:
    (Pair U U), (Pair Atom U), (-> U U)


### 3: Eliminate all Natural Numbers

! Sameness
If a "same as" chart could show that two expressions are the same,
then this fact can be used anywhere without further justification.
"Same as" charts are only to help build understanding.

! Total function
A function that always assigns a value to every possible argument
is called a total function

Note: in Pie all functions are total. That's why the order of subexpressions evaluation is not important

Nat-eliminators
    - which-Nat
    - iter-Nat

! The law of iter-Nat
If target is a Nat, base is an X, and step is an
    (-> X
        X),
then
    (iter-Nat target
        base
        step)
is an X.

! The First Commandment of iter-Nat
If (iter-Nat zero
        base
        step)
is an X, then it is the same X as base.

! The Second Commandment of iter-Nat
If (iter-Nat (add1 n)
        base
        step)
is an X, then it is the same X as
    (step
        (iter-Nat n
            base
            step)).


Sample:
    (iter-Nat 5
        3
        (\ (smaller)
            (add1 smaller)))
    is 8 because it is the same as
        (add1 (add1 (add1 (add1 (add1 3)))))

(claim step-+
    (-> Nat
        Nat))
(define step-+
    (\ (+_(n-1))
        (add1 +_(n-1)))

(define +
    (\ (n j)
        (iter-Nat n
            j
            step-+)))

(define gaus
    (\ (n)
        (rec-Nat n
            0
            (\ (n-1 gaus_(n-1))
                (+ (add1 n-1) gaus_(n-1))))))


(claim step-gaus
    (-> Nat Nat
        Nat))

(define step-gaus
    (\ (n-1 gaus_(n-1))
        (+ (add1 n-1) gaus_(n-1))))

(define gaus
    (\ (n)
        (rec-Nat n
            0
            step-gaus)))


(claim *
    (-> Nat Nat
        Nat))

(claim make-step-*
    (-> Nat
        (-> Nat Nat
            Nat)))

(claim make-step-*
    (-> Nat
        (-> Nat Nat
            Nat)))

(define make-step-*
    (\ (j)
        (\ (n-1 *_(n-1))
            (+ j *_(n-1)))))

The shorter way would be

(claim step-*
    (-> Nat Nat Nat
        Nat))

(define step-*
    (\ (j n-1 *_(n-1))
        (+ j *_(n-1))))

(define *
    (\ (n j)
        (rec-Nat n
            0
            (step-* j))))

! The Law of rec-Nat
If target is a Nat, base is an X, and step is an
    (-> Nat X
        X)
then
    (rec-Nat target
        base
        step)
is an X.

! The First Commandment of rec-Nat
If
    (rec-Nat zero
        base
        step)
is an X, then it is the same X as base.

! The Second Commandment of rec-Nat
If
    (rec-Nat (add1 n)
        base
        step)
is an X, then it is the same X as
    (step n
        (rec-Nat n
            base
            step)).


### 4: Easy a Pie

(claim Pear
    U)
(define Pear
    (Pair Nat Nat))

(claim kar
    (-> (Pair Nat Nat)
        Nat))
(define kar
    (\ (p)
        (elim-Pair
            Nat Nat
            Nat
            p
            (\ (a d)
                a))))

Note: elim-Pair has not been defined yet

(claim kdr
    (-> (Pair Nat Nat)
        Nat))
(define kdr
    (\ (p)
        (elim-Pair
            Nat Nat
            Nat
            p
            (\ (a d)
                d))))

Note: elim-Pair has not been defined yet (as well as for the case of kar)


(claim swap
    (-> (Pair Nat Atom)
        (Pair Atom Nat)))
(define swap
    (\ (p)
        (elim-Pair
            Nat Atom
            (Pair Atom Nat)
            p
            (\ (a d)
                (cons d a)))))

! The Intermediate Law of Application
if f is a
    (PI ((Y U))
        X)
and Z is a U, then
    (f Z)
is an X
    where every Y has been consistently replaced by Z.


(claim elim-Pair
    (PI ((A U)
         (D U)
         (X U))
        (-> (Pair A D)
            (-> A D
                X)
            X)))
(define elim-Pair
    (\ (A D X)
        (\ (p f)
            (f (car p) (cdr p)))))

(define kar
    (\ (p)
        (elim-Pair
            Nat Nat
            Nat
            p
            (\ (a d)
                a))))
(define kdr
    (\ (p)
        (elim-Pair
            Nat Nat
            Nat
            p
            (\ (a d)
                d))))
(define swap
    (\ (p)
        (elim-Pair
            Nat Atom
            (Pair Atom Nat)
            p
            (\ (a d)
                (cons d a)))))

To be a
    (PI ((Y U))
        X)
is to be a lambda-expression that, when applied to a type T,
results in an expression with the type that is a result of
consistently replacing every Y in X with T.

(claim twin
    (PI ((Y U))
        (-> Y
            (Pair Y Y))))
(define twin
    (\ (Y)
        (\ (x)
            (cons x x))))

(claim twin-Atom
    (-> Atom
        (Pair Atom Atom)))
(define twin-Atom
    (twin Atom))


### 5: Lists, Lists and more Lists

(claim expectations
    (List Atom))
(define expressions
    (:: 'cooked
        (:: 'eaten
            (:: 'tried-cleaning
                (:: 'understood
                    (:: 'slept nil))))))

! The Law of List
If E is a type, then (List E) is a type.

nil - is a c-tor
::  - is another c-tor

! The Law of nil
nil is a (List E), no matter what type E is.

! The Law of ::
If e is an E and es is a (List E),
then (:: e es) is a (List E).

! The Law of rec-List
If target is a (List E), base is an X, and step is an
    (-> E (List E)  X
        X)
then
    (rec-List target
        base
        step)
is an X.

! The First Commandment of rec-List
If (rec-List nil
        base
        step)
is an X, then it is the same X as base.

! The Second Commandment of rec-List
If (rec-List (:: e es)
        base
        step)
is an X, then it is the same X as an
    (step e es
        (rec-List es
            base
            step)).

(claim length
    (PI ((E U))
        (-> (List E)
            Nat)))
(claim step-length
    (PI ((E U))
        (-> E (List E) Nat
            Nat)))

(define step-length
    (\ (E)
        (\ (e es length_es)
            (add1 length_es))))
(define length
    (\ (E)
        (\ (es)
            (rec-List es
                (step-length E)))))

Narrowing this down to concrete types (of E) gieves us

(claim length-Atom
    (-> (List Atom)
        Nat))
(define length-Atom
    (length Atom))

! List Entry Types
All the entries in a list must have the same type

(claim append
    (PI ((E U))
        (-> (List E) (List E)
            (List E))))
(claim step-append
    (PI ((E U))
        (-> E (List E) (List E)
            (List E))))

(define step-append
    (\ (E)
        (\ (e es append_es)
            (:: e append_es))))
(define append
    (\ (E)
        (\ (start end)
            (rec-List start
                end
                (step-append E)))))

(claim snoc
    (PI ((E U))
        (-> (List E) E
            (List E))))
(define snoc
    (\ (E)
        (\ (start e)
            (rec-List start
                (:: e nil)
                (step-append E)))))

(claim concat
    (PI ((E U))
        (-> (List E) (List E)
            (List E))))
(claim step-concat
    (PI ((E U))
        (-> E (List E) (List E)
            (List E))))

(define step-concat
    (\ (E)
        (\ (e es concat_es)
            (snoc E concat_es e))))
(define concat
    (\ (E)
        (\ (start end)
            (rec-List end
                start
                (step-concat E)))))

(claim reverse
    (PI ((E U))
        (-> (List E)
            (List E))))
(define reverse
    (\ (E)
        (\ (es)
            (rec-List es
                nil
                (step-reverse E)))))


### 6. Precisely How Many?

! The Law of Vec
If E is a type and k is a Nat,
then (Vec E k) is a type

! The Law of vecnil
vecnil is a (Vec E zero).

! The Law of vec::
If e is an E and es is a (Vec E, k),
then (vec:: e es) is a (Vec E (add1 k)).

eliminators - head and tail

(claim first-of-one
    (PI ((E U))
        (-> (Vec E 1)
            E)))
(define first-of-one
    (\ (E)
        (\ (es)
            (head es))))

(claim first-of-two
    (PI ((E U))
        (-> (Vec E 2)
            E)))
(define first-of-one
    (\ (E)
        (\ (es)
            (head es))))

! probably the first sample of real dependent type is !
(claim first
    (PI ((E U)
         (l Nat))
        (-> (Vec E (add1 l))
            E)))

! The Law of PI !
The expression
    (PI ((y Y))
        X)
is a type when Y is a type, and X is a type if y is a Y.

! The -> and PI
The type
    (-> Y
        X)
is a shorter way of writing
    (PI ((y Y))
        X)
when y is not used in X.

! The Final Law of \
If x is xn X when y is an Y, then
    (\ (y)
        x)
is a
    (PI ((y Y))
        X)

! The Final Law of Application
If f is a
    (PI ((y Y))
        X)
and z i an Y, then
    (f z)
is an X
    where every y has been consistently replaced by z.

! The Final First Commandment of \
If two \-expressions can be made the same
    (PI ((y Y))
        X),
by consistent renaming their variables, then they are the same

! The Final Second Commandment of \
If f is
    (PI ((y Y))
        X),
and y does not occur if f, then f is the same as
    (\ (y)
        (f y)).

The type
    (PI ((es (Vec E (add1 l)))))
could have been written
    (-> (Vec E (add1 l))
        E)
because es is not used in E.


(claim rest
    (PI ((E U)
         (l Nat))
        (-> (Vec E (add1 l))
            (Vec E l))))
(define rest
    (\ (E l)
        (\ (es)
            (tail es))))


### 7: All Depends on the Motive

! Dependent Types
A type that is determined by something that is not a type is called a dependent type

(claim peas
    (PI ((how-many-peas Nat))
        (Vec Atom how-many-peas)))

the rec-Nat can't be used to define peas (because the base must have the same type as the peas_l-1)

We need ind-Nat, who need a motive of type
    (-> Nat
        U)

! Use ind-Nat for Dependent Types
Use ind-Nat instead of rec-Nat when the rec-Nat- or ind-Nat-expression's type depends on target Nat.
The ind-Nat-expression's type is the motive applied to the target.

(claim mot-peas
    (-> Nat
        U))
(define mot-peas
    (\ (k)
        (Vec Atom k)))

(claim step-peas
    (PI ((l-1 Nat))
        (-> (mot-peas l-1)
            (mot-peas (add1 l-1)))))
(define step-peas
    (\ (l-1)
        (\ (peas_l-1)
            (vec:: 'pea peas_l-1))))

! The Law of ind-Nat
If target is a Nat, mot is an
    (-> Nat
        U),
base is a (mot zero), and step is a
    (PI ((n-1 Nat))
        (-> (mot n-1)
            (mot (add1 n-1)))),
then
    (ind-Nat target
        mot
        base
        step)
is a (mot target).

! The First Commandment of ind-Nat
The ind-Nat expression
    (ind-Nat zero
        mot
        base
        step)
is the same (mot zero) as base.

! The Second Commandment of ind-Nat
The ind-Nat expression
    (ind-Nat (add1 n)
        mot
        base
        step)
and
    (step n
        (ind-Nat n
            mot
            base
            step))
are the same (mot (add1 n)).

! Induction on Natural Numbers
Building a value for any natural number by giving a value for zero and
a way to transform a value for n into a value for (n + 1)
is called "induction on natural numbers"

The base replaces each zero with vecnil (because vecnil is the only (Vec Atom zero)),
step-peas replaces each add1 with a vec::

(define peas
    (\ (how-many-peas)
        (ind-Nat how-many-peas
            mot-peas
            vecnil
            step-peas)))


(claim last
    (PI ((E U)
         (l Nat))
        (-> (Vec E (add1 l))
            E)))

(claim base-last
    (PI ((E U))
        (-> (Vec E (add1 l))
            E)))
(define base-last
    (\ (E)
        (\ (es)
            (head es))))

! ind-Nat's Base Type
In ind-Nat, the base's type is the motive, applied to the the target zero.

The step transforms a
    last
function for
    l
into a
    last
function for
    (add1 l).

! ind-Nat's Step Type
In ind-Nat, the step must take two arguments: some Nat n
and an almost-answer, whose type is the motive, applied to n.
The type of the answer from the step is the motive, applied to (add1 n).
The step's type is:
    (PI ((n Nat))
        (-> (mot n)
            (mot (add1 n))))

(claim step-last
    (PI ((E U)
         (l-1 Nat))
        (-> (mot-last E l-1)
            (mot-last E (add1 l-1)))))

(define step-last
    (\ (E l-1)
        (\ (last_l-1)
            (\ (es)
                (last_l-1 (tail es))))))

last_l-1 - is almost the right function, but only for a list of l-1 entries
es type is
    (Vec E (add1
        (add1 l-1))
(tail es) type is
    (Vec E (add1 l-1))
last_l-1 type is
    (-> (Vec E (add1 l-1))
        E)
which is the value of (mot-last l-1).

Now it is a time to
(define last
    (\ (E l)
        (ind-Nat l
            (mot-last E)
            (base-last E)
            (step-last E))))


(claim drop-last
    (PU ((E U)
        (l Nat))
        (-> (Vec E (add1 l))
            (Vec E l))))

(claim base-drop-last
    (PU ((E U)
        (l Nat))
        (-> (Vec E (add1 l))
            (Vec E l))))
(define base-drop-last
    (\ (E)
        (\ (es)
            (vecnil))))

(claim mot-drop-last
    (-> U Nat
        U))
(define mot-drop-last
    (\ (E k)
        (-> (Vec E (add1 k))
            (Vec E k))))

(claim step-drop-last
    (PI ((E U)
         (l-1 Nat))
        (-> (mot-drop-last E l-1)
            (mot-drop-last E (add1 l-1)))))
(define step-drop-last
    (\ (E l-1)
        (\ (drop-last_l-1)
            (\ (es)
                (vec:: (head es)
                    (drop-last_l-1 (tail es)))))))

This is the familiar pattern of induction:
    step-drop-last
transforms
    drop-last
that works for
    (Vec E l-1)
into a
    drop-last
that works for
    (Vec E (add1 l-1))

(define drop-last
    (\ (E l)
        (ind-Nat l
            (mot-drop-last E)
            (base-drop-last E)
            (step-drop-last E))))


## One piece at a time

### 8. Peak a Number, any Number

(claim incr
    (-> Nat
        Nat))
(define incr
    (\ (n)
        (iter-Nat n
            1
            (+ 1))))

Note: both
    (+ 1) and incr
find the same answer,
no matter what the argument is

BTW, they are not the same because have distinct normal forms
NF of (+ 1) is
    (\ (n)
        (add1 n))
NF of incr is
    (\ (n)
        (iter-Nat n
            1
            (\ (j)
                (add1 j))))

! The Law of =
An expression
    (= X from to)
is a type if X is a type, [from] is an X, and [to] is an X.

! Reading from and to as Nouns
Because [from] and [to] are convenient names, the corresponding parts of an =-expression
are referred to as the FROM and the TWO.

Note: types can be read as statements (sometimes called propositions)

A PI-expression can be read as "for every"
    (PI ((n Nat))
        (= Nat (+ 1 n) (add1 n)))

Q: What is the point of reading types as statements?
A: If a type can be read as statement, then judging
        the statement to be true
    means that
        there is an expression with that type

Sample: So, saying "(+ n 0) and n   are equal Nats"
    means that there is an expression of type
        (= Nat (+ n 0) n)
        
Another way to think about statements is an expectation of a proof,
or as a problem to be solved
    - having seen a claim, it makes sense to expect a definition

There is only one c-tor for (=) and it is called "same" (with 2 arguments)

! The Law of same
The expression (same e) is an (= X e e) if e is an X.

The expression
    (same 21)
is an
    (= Nat (+ 17 4) (+ 11 10))

The
    (same (incr 3))
is a proof of
    (= Nat (+ 2 2) 4).

(=) - is a type c-tor, (same) - its c-tor

(claim +1=add1
    (PI ((n Nat))
        (= Nat (+ 1 n) (+1 n))))
(define +1=add1
    (\ (n)
        (same (add1 n))))

Here "+1=add1" is a statement and we show the appropriate proof


(claim incr=add1
    (PI ((n Nat))
        (= Nat (incr n) (add1 n))))

! Neutral Expressions
Variables that are not defined are neutral.
If the target of an eliminator expression is neutral,
then the eliminator expression is neutral

Neutral expressions do not have a c-tor at the top

! "If" and "Then" as Types
The expression
    (-> X
        Y)
can be read as the statement,
    "if X then Y."

! Observation about incr
No matter which Nat n is,
    (incr (add1 n))
is the same Nat as
    (add1 (incr n)).

! The Law of cong
If f is an
    (-> X
        Y)
and "target" is an
    (= X from to),
then (cong target f) is and
    (= Y (f from) (f to)).

(define step-incr=add1
    (\ (n-1)
        (\ (incr=add1_(n-1))
            (cong incr=add1_(n-1) (+1)))))

(define incr=add1
    (\ (n)
        (ind-Nat n
            mot-incr=add1
            base-incr=add1
            step-incr=add1)))

Neutral expressions are those that cannot yet be evaluated, but replacing their variables with values
could allow evaluation

! The Commandment of cong
If x is an X, and f is an
    (-> X
        Y),
then (cong (same x) f) is the same
    (= Y (f x) (f x))
as
    (same (f x)).

The interplay between judging sameness and stating equality
is at the heart of working with dependent types.

### 9. Double your Money, Get Twice as Much
