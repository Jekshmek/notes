https://developers.google.com/protocol-buffers/

https://github.com/google/protobuf
https://github.com/google/protobuf/tree/master/src
https://github.com/google/protobuf/tree/master/java
https://github.com/google/protobuf/tree/master/python

https://developers.google.com/protocol-buffers/docs/overview
https://developers.google.com/protocol-buffers/docs/proto3
https://developers.google.com/protocol-buffers/docs/encoding
    https://www.sigmainfy.com/blog/protocol-buffers-encoding-and-message-structure.html

https://developers.google.com/protocol-buffers/docs/tutorials
https://developers.google.com/protocol-buffers/docs/javatutorial
https://developers.google.com/protocol-buffers/docs/pythontutorial

https://developers.google.com/protocol-buffers/docs/reference/overview
https://developers.google.com/protocol-buffers/docs/reference/proto3-spec

json
return JsonFormat.printer().includingDefaultValueFields().print(res);

py
pip install grpcio protobuf

from google.protobuf.internal.decoder import _DecodeVarint32
from google.protobuf.internal.encoder import _VarintBytes
import grpc

cpp
https://developers.google.com/protocol-buffers/docs/cpptutorial
https://developers.google.com/protocol-buffers/docs/reference/cpp/
https://developers.google.com/protocol-buffers/docs/reference/cpp-generated
https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.message
https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.message#Message
https://github.com/google/protobuf-gradle-plugin/issues/139

bool SerializeToString(string* output) const;
    serializes the message and stores the bytes in the given string.
    Note that the bytes are binary, not text; we only use the string class as a convenient container.
bool ParseFromString(const string& data);
    parses a message from the given string.
bool SerializeToOstream(ostream* output) const;
    writes the message to the given C++ ostream.
bool ParseFromIstream(istream* input)
    parses a message from the given C++ istream

build
mkdir build && cd build
cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_CXX_FLAGS=-D_GLIBCXX_USE_CXX11_ABI=0 ../cmake 
cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_CXX_FLAGS=-D_GLIBCXX_USE_CXX11_ABI=1 ../cmake 
cmake --build . -- VERBOSE=1 > cmake-bld.txt
