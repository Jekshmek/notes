Bekesi - Intro to ScalaTest
https://www.youtube.com/watch?v=2yfq_xHcVV0

samples:
https://github.com/ScaleChain/scalechain/blob/master/scalechain-script/src/test/scala/io/scalechain/blockchain/script/ArithmeticSpec.scala

matchers:
http://www.scalatest.org/user_guide/using_matchers

intercept:
test("...") {
    intercept[NoSuchElementException] {
        Set.empty.head
    }
}

PropSpec
import org.staclatest._
import prop._
import scala.collection.immutable._
class SetSpec extends PropSpec with TableDrivenPropertyChecks with Matchers {
    val examples =
        Table(
            "set",
            BitSet.empty,
            HashSet.empty[Int],
            TreeSet.empty[Int]
        )
    property("an empty Set should have size 0") {
        forAll(examples) { set =>
            set.size should be (0)
        }
    }
    property("invoking head on an empty set should produce NoSuchElementException") {
        forAll(examples) { set =>
            a [NoSuchElementException] should be thrownBy { set.head }
        }
    }
}

Defining base class

trait MovioSpec extends FunSpecLike
    with ShouldMatchers
    with OptionValues
    with EitherValues
    with BeforeAndAfter      // before/after
    with BeforeAndAfterEach  //
    with BeforeAndAfterAll   //
    with UtcTime

Assertions:

Assert("abcd" == "abc") // org.scalates.exceptions.TestFailedException
Assert("abcd" === "abc") // "ab[cd]" did not equal "ab[c]"
if (!some-condition)
    cancel("Can't run the test because bla-bla")
assume(cond, "The cond is false bla-bla")
assume(...someInt == 9)

Tagging:

import org.scalates.Tag
object SlowTest extends Tag("com.mycompany.tags.SlowTest")
object DbTest extends Tag("com.mycompany.tags.DbTest")
import org.scalatest.FlatSpec
class ExampleSpec extends FlatSpec {
    "The Scala language" must "add correctly" taggedAs(SlowTest) in {
        val sum = 1 + 1
        assert(sum === 2)
    }
    it must "subtract correctly" taggedAs(SlowTest, DbTest) in {
        val diff = 4 - 1
        assert(diff === 3)
    }
}

sbt
> testOnly *ExampleSpec -- -l com.mycompaty.tags.SlowTest // Exclude SlowTest-s

Matchers:
// equality
result should equal (3) // can customize equality
result should === (3)   // can customize equality and enforce type constraints
result should be (3)    // cannot customize equality, so fastest to compile
result shouldEqual 3    // can customize equality, no parenthesis required
result shouldBe 3       // cannot customize equality, so fastest to compile, no parenthesis required
// length/size for collections
result should have lenth 3
result should have size 10
// strings
string should startWith ("Hello")
string should endWith   ("world")
string should include   ("seven")
// regex
string should startWith regex "Hell*o"
string should endWith   regex "wo.ld"
string should include   regex "wo.ld"
string should fullyMatch regex """(-)?(\d+)(\.\d*)?"""
"abbccxxx"    should startWith  regex("a(b*)(c*)" withGroups ("bb", "cc"))
"abbccxxx"    should endWith    regex("a(b*)(c*)" withGroups ("bb", "cc"))
"xxxabbccxxx" should include    regex("a(b*)(c*)" withGroups ("bb", "cc"))
"abbcc"       should fullyMatch regex("a(b*)(c*)" withGroups ("bb", "cc"))
// integers
one should be <  7
one should be >  0
one should be <= 7
one should be >= 0
// boolean with be (reflection)
temp     should be a  'file      // calls     temp.isFile()     :Boolean
keyEvent should be aa 'actionKey // calls keyEvent.isActionKey():Boolean
class FileBePropertyMatcher extends BePropertyMatcher[java.io.File] {
    def apply(left: java.io.File) = BePropertyMatchResult(left.isFile, "file")
}
val file = new FileBePropertyMatcher
temp     should be a  file
xs       shouldBe     traversableAgain
keyEvent should be an actionKey
// references
ref1 should be theSameInstanceAs ref2
// types
result1 shouldBe a       [Tiger]
result1 should not be an [Orangutan]
// ranges
sevenDotOh should equal (6.9 +- 0.2)
sevenDotOh should ===   (6.9 +- 0.2)
sevenDotOh should be    (6.9 +- 0.2)
sevenDotOh shouldEqual   6.9 +- 0.2
sevenDotOh shouldBe      6.9 +- 0.2
// empty
traversable shouldBe      empty
javaMap     should not be empty
// contain
traversable should contain ("five")
// loverCased
(List("Hi", "Di", "Ho") should contain ("ho")) (after being lowerCased)
// oneOf
List(1, 2, 3, 4, 5) should contain oneOf (5, 7, 9)
Some(7)             should contain oneOf (5, 7, 9)
"howdy"             should contain oneOf ('a', 'b', 'c', 'd')
// noneOf
List(1, 2, 3, 4, 5) should contain noneOf (7, 8, 9)
// atLeastOneOf
List(1, 2, 3)  should contain atLeastOneOf (2, 3, 4)
Array(1, 2, 3) should contain atLeastOneOf (2, 3, 4)
"abc"          should contain atLeastOneOf ('c', 'a', 't')


