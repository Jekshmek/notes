http://gigiigig.github.io/posts/2015/09/13/aux-pattern.html
https://gist.github.com/gigiigig/3cd104e8951b4432afd5
http://typelevel.org/blog/2015/07/19/forget-refinement-aux.html

Per Miles Sabin, Aux - is a way to encode multiple implicit parameters blocks (which need to be implemented by Scala/Dotty compiler).

import shapeless._

import scalaz._
import Scalaz._

object console extends App {

  trait Foo[A] {
    type B
    def value: B
  }

  object Foo {
    type Aux[A0, B0] = Foo[A0] { type B = B0 }

    implicit def fi = new Foo[Int] {
      type B = String
      val value = "Foo"
    }
    implicit def fs = new Foo[String] {
      type B = Boolean
      val value = false
    }

  }

  def ciao[T, R](t: T)
                (implicit f: Foo.Aux[T, R],
                          m: Monoid[R]): R = f.value
  val res1: String = ciao(2)
  val res2: Boolean = ciao("")
  println(s"res1: ${res1}")
}

// Real shapeless-length sample:

def length[T, R <: HList](t: T)
                         (implicit g: Generic.Aux[T, R],
                                   l: Length[R]): l.Out = l()

case class Foo(i: Int, s: String, b: Boolean)
val foo = Foo(1, "", false)

val res = length(foo)
println(s"res: ${Nat.toInt(res)}")

// res: 3
