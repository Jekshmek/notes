Grebennikov - Distributed Systems

trait HttpUtils extends LazyLogging {
    implicit val system = ActorSystem.create("distdb")
    implicit val executor = system.dispatcher
    implicit val mat = ActorMaterializer()

    val http = Http(system)

    def httpWrite(node: String, data: String) = // return Future ...
        http.singleRequest(HttpRequest(
            uri = s"http://$node:8000/local",
            method = HttpMethods.POST,
            entity = data))

    def httpRead(node: String) = // return Future ...
        http.singleRequest(
            HttpRequest(
                uri = s"http://$node:8000/local",
                method = HttpMethods.GET))

    def parseResponse(response: HttpResponse) = response
        .entity
        .dataBytes
        .runFold(ByteString(""))(_ ++ _)
        .map(_.utf8String)
}

import scala.concurrent.{Await, Future}

trait RestfulServer extends HttpUtils {
    var value: String = "0"  // our value (no keys) DB
    val hostname = sys.env("HOSTNAME")
    val nodes = sys.env("NODES")
        .split(",")
        .toList
        .filter(_.nonEmpty)
    val slaves = nodes.filter(_ != hostname) // all but our node

    def read: Future[HttpResponse]
    def write(value: String): Future[HttpResponse]

    def start = {
        val route = path("db") { // for us as a DB
            get {
                complete {
                    read
                }
            } ~ post {
                entity(as[String]) { data =>
                    complete {
                        write(data)
                    }
                }
            }
        } ~ path("local") { // for the distributed system
            get {
                complete {
                    logger.info(s"local read: $value")
                    HttpResponse(StatusCodes.OK, entity = value)
                }
            } ~ post {
                entity(as[String]) { data =>
                    complete {
                        value = data
                        logger.info(s"local commit: $data")
                        HttpResponse(StatusCodes.OK, entiny = value)
                    }
                }
            }
        }

        http.bindAndHandle(route, "0.0.0.0", 8000)
        logger.info("Service started")
        Await.result(system.whenTerminated, Duration.Inf)
    }
}


class MasterSlave extends RestfulServer {
}
