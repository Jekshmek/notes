https://blog.codecentric.de/en/2014/02/elasticsearch-101/

curl -XGET   http://localhost:9020/...
     -XPOST
     -XPUT
     -XDELETE


info
    curl -XGET   http://localhost:9020/
      get info about instance as a whole


health:

GET  /_cluster/health?pretty
     /_cluster/nodes/
     
POST /_cluster/nodes/_shutdown
     /_cluster/nodes/<your-node-id>/_shutdown


putting docs:

curl -XPUT http://localhost:9200/blog/article/1 -d '{"title": "New version of Elastic Search released!", "content": "...", "tags": ["announce", "elasticsearch", "release"] }'

resp:
{ "ok":true, "_index":"blog", "_type":"article", "_id":"1", "_version":1 }

for auto-generating id:
... -XPOST .../article/ -d '{...}'
resp:
{ ... "id":"<your-ugly-id>" ... }


retrieving docs:

GET /blog/article/1
resp:
{ "_index":"blog", "_type":"article", "_id":"1", "_version":1, "exists":true, "_source":{ "title":... } }
resp if not found:
{ "_index":"blog", "_type":"article", "_id":"9999", "exists":false }


updating docs:

...is implemented via scripts...

curl -XPOST http://localhost:9200/blog/article/1/_update -d '{ "script": "ctx._source.content = \"new content\"" }'
resp:
{"ok":true,"_index":"blog","_type":"article","_id":"1","_version":2}

default values must be in upsert section:

curl -XPOST http://localhost:9200/blog/article/1/_update -d '{ "script": "ctx._source.counter += 1",
  "upsert": { "counter" : 0 }
}'


Deleting documents:

curl -XDELETE http://localhost:9200/blog/article/1
resp:
{"ok":true,"found":true,"_index":"blog","_type":"article","_id":"1","_version":3}


Index creation:

curl -XPOST 'http://localhost:9200/posts'
resp:
{"ok":true,"acknowledged":true}


Index deletioin:

curl -XDELETE 'http://localhost:9200/posts'
resp:
{"ok":true,"acknowledged":true}


Schema mapping (mappings):

posts.json:

{
  "mappings": {
    "post": {
      "properties": {                
        "id": {"type":"long", "store":"yes", "precision_step":"0" },
        "name": {"type":"string", "store":"yes", "index":"analyzed" },
        "published": {"type":"date", "store":"yes", "precision_step":"0" },
        "contents": {"type":"string", "store":"no", "index":"analyzed" }             
      }
    }
  }
}

curl -XPOST 'http://localhost:9200/posts' –d @posts.json
resp:
{"ok":true,"acknowledged":true}

we can also include one-more type:

{
  "mappings": {
    ...
    "user": {
      "properties": {                
        "id": { "type":"long", "store":"yes", "precision_step":"0" },
        "name": { "type":"string", "store":"yes", "index":"analyzed" }             
      }
    }
    ...
  }
}

Common attributes:

index_name:
  the name of the field in the Lucene index
index:
  analyzed (default)
    the field will be analyzed and thus searchable
  no
    you won't be able to search such a field
  not_analyzed (for the String-type fields only)
    the field should be indexed but not processed by the analyzer
store:
  no (default)
    the field will not be indexed and can't be returned as a result (although if you use the _source field, ...),
    but if you have it indexed, you still can search on it
  yes
    the field should be written to the index and retrievable
boost:
  1 (default)
    how important the field is inside the document (the higher - the more important)
null_value:
  Specifies a value that should be written into the index if that field is not a part of an indexed document.
  The default behavior will just omit that field
include_in_all:
  Specifies if the field should be included in the _all field.
  By default, if the _all field is used, all the fields will be included in it.


Core types:
- String
- Number
- Date
- Boolean
- Binary


String
In addition to the common attributes, the following ones can also be set for string-based fields:

term_vector:
  This can take the values
    no
      (the default one),
    yes,
    with_offsets,
    with_positions, or 
    with_positions_offsets.
  It defines whether the Lucene term vectors should be calculated for that field or not.
  If you are using highlighting, you will need to calculate term vectors.
omit_norms:
  This can take the value true or false. The default value is false. When this attribute is set to true, it disables the Lucene norms calculation for that field
  (and thus you can't use index-time boosting).
omit_term_freq_and_positions:
  This can take the value true or false. The default value is false. Set this attribute to true, if you want to omit term frequency and position calculation during indexing.
  (Deprecated since ElasticSearch 0.20).
index_options:
  This allows to set indexing options. The possible values are
    docs
      which affects in number of documents for terms to be indexed,
    freqs
      which results in indexing number of documents for terms and term frequencies and
    positions
      which results in the previously mentioned two and term positions.
  The default value is freqs. (Available since ElasticSearch 0.20.)
analyzer:
  This is the name of the analyzer used for indexing and searching. It defaults to the globally defined analyzer name.
index_analyzer:
  This is the name of the analyzer used for indexing.
search_analyzer:
  This is the name of the analyzer used for processing the part of the query string that is sent to that field.
ignore_above:
  This is the maximum size of the field. The rest of the fields beyond the specified value characters will be ignored.
  This attribute is useful if we are only interested in the first N characters of the field.

