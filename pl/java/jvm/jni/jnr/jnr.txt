https://github.com/jnr
libffi
https://github.com/jnr/jffi
https://github.com/jnr/jnr-ffi

dist:
https://mvnrepository.com/artifact/com.github.jnr/jnr-ffi
2.1.5

articles:
https://habrahabr.ru/post/260801/

presentations:
https://www.youtube.com/watch?v=DMkxu_v-9vA
https://www.slideshare.net/rsciampacone/effective-foreign-function-interfaces
https://www.slideshare.net/skrb/jnr-java-native-runtime
http://www.oracle.com/technetwork/java/jvmls2013nutter-2013526.pdf

structs:
http://stackoverflow.com/questions/38369104/how-to-use-a-struct-with-a-struct-in-jnr-ffi
http://stackoverflow.com/questions/21214328/how-to-use-java-jnr-to-infer-a-clib-struct

in/out, stdcall:
http://stackoverflow.com/questions/37968009/stdcall-with-jnr
https://github.com/jnr/jnr-ffi/issues/65

pointers:
http://stackoverflow.com/questions/26199515/callback-closure-with-jnr-taking-a-pointer-argument
import jnr.ffi.Memory;
import jnr.ffi.Pointer;
import jnr.ffi.Runtime;

@Test
public void testMetaUtf8() throws UnsupportedEncodingException {
    Pointer ptr = Runtime.getRuntime(c).getMemoryManager().allocate(5000);
    int size = c.snprintf(ptr, 5000, "%s", UTF8Encoding.class, "\u7684");
    Assert.assertEquals(3, size);
    String result = ptr.getString(0, size, Charset.forName("UTF-8"));
    String expected = new String("\u7684".getBytes("UTF-8"), "UTF-8");
    Assert.assertEquals(expected, result);
}

annotations:
import jnr.ffi.annotations...
* Clear (?no usages), In, Out
* Pinned - lock/unlock JVM memory instead of copying to/from native-memory
* Transient
    This means it can be backed by a temporarily allocated native memory block,
 and after the method call, the native memory can be freed again.
* NulTerminate - for strings

properties:
System.setProperty("jaffl.compiler.dump", "true");

samples:
https://github.com/jnr/jnr-ffi-examples

test:
MemoryIOTest
    allocateDirect/allocate

https://github.com/jnr/jnr-ffi/tree/master/libtest

void ptr_set_array_element(@Out Pointer[] array, int index, Pointer value);

ptr_set_array_element(void **ptrArray, int arrayIndex, void *value) {    
    ptrArray[arrayIndex] = value;
}

AddressByReferenceTest

public static interface TestLibOutOnly {
Address ptr_ret_pointer(@Out AddressByReference p, int offset);

https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/byref/AddressByReference.java

interface Lib {
    void get_a(@Out AddressByReference ap);
}

AddressByReference ap = new AddressByReference();
lib.get_a(ap);
System.out.println("a from lib=" + a.getValue());


https://github.com/jnr/jnr-ffi/blob/master/src/test/java/jnr/ffi/BufferTest.java

public static interface TestLib {
    void fillByteBuffer(@Out ByteBuffer buf, byte value, int size);
    void fillByteBuffer(@Out Buffer buf, byte value, int size);
    ...
}

https://github.com/jnr/jnr-ffi/blob/master/libtest/BufferTest.c


https://github.com/jnr/jnr-ffi/blob/master/libtest/ClosureTest.c

int testClosureNull(int (*closure)(void), int defaultValue)
{
    return closure ? (*closure)() : defaultValue;
}
void testClosureVrV(void (*closure)(void))
{
    (*closure)();
}

https://github.com/jnr/jnr-ffi/blob/master/src/test/java/jnr/ffi/DelegateTest.java

public static interface TestLib {
    public static interface CallableNull {
        @Delegate public int call();
    }
    int testClosureNull(CallableNull closure, int defaultValue);
    public static interface CallableVrV {
        @Delegate public void call();
    }
    void testClosureVrV(CallableVrV closure);
    public static interface CallableVrB {
        @Delegate public byte call();
    }
    ...
}

Pinned (?No check for this annotation):
https://github.com/jnr/jnr-ffi/blob/master/src/test/java/jnr/ffi/struct/UTF8StringFieldTest.java
