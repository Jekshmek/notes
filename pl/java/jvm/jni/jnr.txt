https://github.com/jnr
libffi
https://github.com/jnr/jffi
https://github.com/jnr/jnr-ffi

samples:
https://github.com/jnr/jnr-ffi-examples
https://github.com/hassie/natto4j
https://github.com/maketechnology/cefswt/blob/master/com.make.cefswt/CEF.java
!!!NativeName
        @Retention(RetentionPolicy.RUNTIME)
        @Target(ElementType.METHOD)
        @interface NativeName {
            String value();
        }
        
        class NativeNameAnnotationFunctionMapper implements FunctionMapper {
            @Override
            public String mapFunctionName(String functionName, Context context) {
                for (Annotation ann : context.getAnnotations()) {
                    if (ann.annotationType() == NativeName.class)
                        return ((NativeName) ann).value();
                }
                return functionName;
            }
        }

        static class InstanceCreator {
            private static CEFInterface createInstance() {
                CEFInterface lib = LibraryLoader.create(CEFInterface.class)
                  .option(LibraryOption.FunctionMapper, new NativeNameAnnotationFunctionMapper())
                  .load("cef");
                RUNTIME = jnr.ffi.Runtime.getRuntime(lib);
                return lib;
            }
        }

dist:
https://mvnrepository.com/artifact/com.github.jnr/jnr-ffi
2.1.5

articles:
https://habrahabr.ru/post/260801/

presentations:
https://www.youtube.com/watch?v=DMkxu_v-9vA
https://www.slideshare.net/rsciampacone/effective-foreign-function-interfaces
https://www.slideshare.net/skrb/jnr-java-native-runtime
http://www.oracle.com/technetwork/java/jvmls2013nutter-2013526.pdf

structs:
http://stackoverflow.com/questions/38369104/how-to-use-a-struct-with-a-struct-in-jnr-ffi
http://stackoverflow.com/questions/21214328/how-to-use-java-jnr-to-infer-a-clib-struct

in/out, stdcall:
http://stackoverflow.com/questions/37968009/stdcall-with-jnr
https://github.com/jnr/jnr-ffi/issues/65

pointers:
http://stackoverflow.com/questions/26199515/callback-closure-with-jnr-taking-a-pointer-argument

src
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/LibraryLoader.java
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/ReflectionLibraryLoader.java

https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/NativeClosureProxy.java
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/NativeType.java


FunctionMapper:
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/mapper/FunctionMapper.java

<- CompositeFunctionMapper <- LibraryLoader
IdentityFunctionMapper
<- 
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/AsmLibraryLoader.java

https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/DefaultInvokerFactory.java

? SignatureTypeMapper, SignatureTypeMapperAdapter

https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/NativeFunctionMapperContext.java
.. isSymbolPresent
<- unused !!!


TypeMapper:
-//-
?InvokerTypeMapper

Invoker:
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/InvokerUtil.java
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/DefaultInvokerFactory.java


Types:
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/InvokerUtil.java

NativeType, Type

CodeGen:
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/AsmStructByReferenceFromNativeConverter.java
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/CodegenUtils.java
<-
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/StructByReferenceResultConverterFactory.java
    <-
    https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/InvokerTypeMapper.java
        <-
        https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/ReflectionLibraryLoader.java
        https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/AsmLibraryLoader.java 
            NativeLibraryLoader.ASM_ENABLED, ? CachingTypeMapper

https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/NativeLibraryLoader.java

class NativeLibraryLoader<T>  extends jnr.ffi.LibraryLoader<T> {
    static final boolean ASM_ENABLED = getBooleanProperty("jnr.ffi.asm.enabled", true);

    NativeLibraryLoader(Class<T> interfaceClass) {
        super(interfaceClass);
    }
    public T loadLibrary(Class<T> interfaceClass, Collection<String> libraryNames, Collection<String> searchPaths, Map<LibraryOption, Object> options) {
        NativeLibrary nativeLibrary = new NativeLibrary(libraryNames, searchPaths);

        try {
            return ASM_ENABLED
                ? new AsmLibraryLoader().loadLibrary(nativeLibrary, interfaceClass, options)
                : new ReflectionLibraryLoader().loadLibrary(nativeLibrary, interfaceClass, options);
        } catch (RuntimeException ex) {
            throw ex;

        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
}

<-
https://github.com/jnr/jnr-ffi/blob/master/src/main/java/jnr/ffi/provider/jffi/Provider.java

public final class Provider extends FFIProvider {
    private final NativeRuntime runtime;
    
    public Provider() {
        this.runtime = NativeRuntime.getInstance();
    }
    public final Runtime getRuntime() {
        return runtime;
    }
    public <T> jnr.ffi.LibraryLoader<T> createLibraryLoader(Class<T> interfaceClass) {
        return new NativeLibraryLoader<T>(interfaceClass);
    }
}
