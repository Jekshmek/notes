https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation

https://spring.io/guides/gs/validating-form-input/

https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/validation/MessageCodesResolver.html
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/validation/DefaultMessageCodesResolver.html

https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-beans
BeanWrapper i-face
BeanWrapperImpl
    setPropertyValue
    getPropertyValue

BeanWrapper company = new BeanWrapperImpl(new Company());
// setting the company name..
company.setPropertyValue("name", "Some Company Inc.");
// ... can also be done like this:
PropertyValue value = new PropertyValue("name", "Some Company Inc.");
company.setPropertyValue(value);
// ok, let's create the director and tie it to the company:
BeanWrapper jim = new BeanWrapperImpl(new Employee());
jim.setPropertyValue("name", "Jim Stravinsky");
company.setPropertyValue("managingDirector", jim.getWrappedInstance());
// retrieving the salary of the managingDirector through the company
Float salary = (Float) company.getPropertyValue("managingDirector.salary");

PropertyEditors (java.beans.PropertyEditor)
https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-beans-conversion


Spring Validation
https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation-beanvalidation
JSR-303/JSR-349
https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation-beanvalidation-overview
http://beanvalidation.org/
http://beanvalidation.org/2.0/
https://speakerdeck.com/gunnarmorling/keeping-your-data-sane-with-bean-validation-2-dot-3

@NotNull
@Size(max=64)
@Min(0)

Use the LocalValidatorFactoryBean to configure a default Validator as a Spring bean:
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

LocalValidatorFactoryBean implements both javax.validation.ValidatorFactory and javax.validation.Validator,
as well as Springâ€™s org.springframework.validation.Validator


You may inject a reference to either of these interfaces into beans that need to invoke validation logic.
Inject a reference to javax.validation.Validator if you prefer to work with the Bean Validation API directly:

import javax.validation.Validator;

@Service
public class MyService {
    @Autowired
    private Validator validator;
    ...
}

Inject a reference to org.springframework.validation.Validator if your bean requires the Spring Validation API:

import org.springframework.validation.Validator;

@Service
public class MyService {
    @Autowired
    private Validator validator;
}

Custom Constraints
https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation-beanvalidation-spring-constraints

@Target({ElementType.METHOD, ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
@Constraint(validatedBy=MyConstraintValidator.class)
public @interface MyConstraint {
}

import javax.validation.ConstraintValidator;

public class MyConstraintValidator implements ConstraintValidator {
    @Autowired;
    private Foo aDependency;
    ...
}


Configuring a DataBinder
https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation-binder

Foo target = new Foo();
DataBinder binder = new DataBinder(target);
binder.setValidator(new FooValidator());

// bind to the target object
binder.bind(propertyValues);

// validate the target object
binder.validate();

// get BindingResult that includes any validation errors
BindingResult results = binder.getBindingResult();

A DataBinder can also be configured with multiple Validator instances via dataBinder.addValidators and dataBinder.replaceValidators

https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-validation

It is possible to configure the SpEL expression parser using a parser configuration object
    (org.springframework.expression.spel.SpelParserConfiguration)



class Demo {
    public List<String> list;
}

// Turn on:
// - auto null reference initialization
// - auto collection growing
SpelParserConfiguration config = new SpelParserConfiguration(true,true);

ExpressionParser parser = new SpelExpressionParser(config);

Expression expression = parser.parseExpression("list[3]");

Demo demo = new Demo();

Object o = expression.getValue(demo);

// demo.list will now be a real collection of 4 entries
// Each entry is a new empty String

SpEL compilation
https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions-spel-compilation

Compiler configuration
https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions-compiler-configuration

The compiler is not turned on by default, but there are two ways to turn it on. It can be turned on using the parser configuration process discussed earlier or via a system property when SpEL usage is embedded inside another component.
