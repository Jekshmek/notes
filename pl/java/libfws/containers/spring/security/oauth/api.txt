https://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/

AuthServer

endpoints
https://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/provider/endpoint/package-summary.html
https://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.html
    /oauth/check_token
https://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/provider/endpoint/TokenKeyEndpoint.html
    /oauth/token_key


AuthClient

https://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/client/package-summary.html


AuthProvider

https://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/provider/package-summary.html

config.annotation
https://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/config/annotation/
config.xml
https://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/config/xml/package-summary.html

common
https://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/common/package-summary.html

expiration
ExpiringOAuth2RefreshToken
https://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/common/ExpiringOAuth2RefreshToken.html
    protected boolean isExpired(OAuth2RefreshToken refreshToken) {
        if (refreshToken instanceof ExpiringOAuth2RefreshToken) {
            ExpiringOAuth2RefreshToken expiringToken = (ExpiringOAuth2RefreshToken) refreshToken;
            return expiringToken.getExpiration() == null
                || System.currentTimeMillis() > expiringToken.getExpiration().getTime();
        }
        return false;
    }
