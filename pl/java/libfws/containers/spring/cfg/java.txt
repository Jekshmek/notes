https://projects.spring.io/spring-framework/

https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-java
https://docs.spring.io/spring-boot/docs/2.0.0.M7/reference/htmlsingle/#boot-features-developing-auto-configuration

http://www.baeldung.com/spring-boot-migration

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

???.ConditionalOnProperty
???.ConditionalOnMissingBean


https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc#web-environment
Web Environment:
A SpringApplication attempts to create the right type of ApplicationContext on your behalf. By default, an AnnotationConfigApplicationContext or
AnnotationConfigServletWebServerApplicationContext is used, depending on whether you are developing a web application or not.

https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-tools/spring-boot-loader/src/it/executable-props-lib/src/main/java/org/springframework/boot/launcher/it/props/EmbeddedJarStarter.java

cheat-sheets:
https://zeroturnaround.com/rebellabs/spring-framework-annotations-cheat-sheet/
http://files.zeroturnaround.com/pdf/zt_spring_annotations_cheat_sheet.pdf

public final class EmbeddedJarStarter {
    public static void main(String[] args) throws Exception {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SpringConfiguration.class);
        context.getBean(SpringConfiguration.class).run(args);
        context.close();
    }
}

-//-/SpringConfiguration.java
@Configuration
@ComponentScan
public class SpringConfiguration implements InitializingBean {
    private String message = "Jar";
    @Override
    public void afterPropertiesSet() throws IOException {
        Properties props = new Properties();
        props.load(new ClassPathResource("application.properties").getInputStream());
        String value = props.getProperty("message");
        if (value!=null) {
            this.message = value;
        }
    }
    public void run(String... args) {
        System.err.println("Hello Embedded " + this.message + "!");
    }
}

@Configuration
@ComponentScan('com.clarabridge.services')
class WebConfiguration {
    
    @Bean
    @Autowired
    public ForeignClass beanName(Service service) {
        return new ForeignClass(service);
    }

}

import javax.annotation.PostConstruct;

@Configuration ??? @Component
Exporter {
    @PostConstruct
    public void doPC() {
    }
    @PreDestroy
}

@Autowired, @Inject, @Resource, and @Value annotations are handled by Spring BeanPostProcessor implementations
which in turn means that you cannot apply these annotations within your own BeanPostProcessor or BeanFactoryPostProcessor types (if any).
These types must be 'wired up' explicitly via XML or using a Spring @Bean method.

import org.springframework.beans.factory.annotation.Value;
...
    @Value("${lang.id:en}")
    private String langId;
...
