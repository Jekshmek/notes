? KafkaManager

kafka-topic.sh
    most topic operations
kafka-config.sh
    config changes

    --zookeper
    --config
    --disable-rack-aware
    --if-not-exists
    --if-exists

samples:
kafka-topics.sh --zookeeper <zk-connect> --create --topic <topic-name> --replication-factor <int> --partitions <int>
    ... --alter --topic <topic-name> --partitions <int>
    ... --delete --topic <topic-name>
    ... --list
    ... --describe [--topic <topic-name>]
        --topics-with-overrides
        --under-replicated-partitions
        --unavailable-partitions

kafka-consumer-groups.sh
    --zookeeper <zk> # for old consumer-groups
    --bootstrap-server <kafka.host:9092/kafka-cluster> # for new consumer-groups
        --list
        --describe <grp>


kafka-run-class.sh
    Run a java-class in appropriate environment

    kafka.tools.ExportZkOffsets --zkconnect zoo1.example.com:2181/kafka-cluster --group testgroup --output-file offsets
    kafka.tools.DumpLogSegments --files 000123.log
        --print-data-log
        --index-sanity-check

kafka-config.sh
    per-topic, per-client or overrides

    --zookeeper <zk> --alter --entity-type topics --entity-name <topic-name> --add-config <key>=<value>[,<key>=<value>...]
    ... retention.ms=3600000
    --zookeeper <zk> --alter --entity-type clients --entyty-name <client-id> --add-config <key>=<value>[,<key>=<value>...]
    ... --describe
        describe the default overrides
    --alter ... --detete-config retention.ms
        delete a config-override

kafka-preferred-replica-election.sh
    --zookeper <zk> --path-to-json-file partitions.json

kafka-reassign-partitions.sh
    --zookeper <zk> --topics-to-move-json-file topics.json --brokers-list 0,1
        generate a set of partition moves
    --verify --reassignment-json-file reassing.json

kafka-replica-verrification.sh
