Guide:
https://docs.gradle.org/current/userguide/native_software.html

DesignDocs:
https://github.com/gradle/gradle/blob/master/design-docs/done/continuous-delivery-for-c-plus-plus.md
? cpp-lib ?
#story-allow-library-binaries-to-be-used-as-input-to-executable-binaries

? SharedLibraryBinary ?
NativeBinaries
??? NativeBinary.lib(Object)
// import org.gradle.platform.base.Binary;

import org.gradle.platform.base.Binary;
import org.gradle.nativeplatform.platform.NativePlatform;

/**
 * Represents a particular binary artifact.
 */
@Incubating
public interface NativeBinary extends Binary {
    /**
     * The {@link org.gradle.nativeplatform.Flavor} that this binary was built with.
     */
    Flavor getFlavor();

    /**
     * Returns the {@link org.gradle.nativeplatform.platform.NativePlatform} that this binary is targeted to run on.
     */
    NativePlatform getTargetPlatform();

    /**
     * Returns the {@link org.gradle.nativeplatform.BuildType} used to construct this binary.
     */
    BuildType getBuildType();
}

package org.gradle.nativeplatform;

@Incubating
public interface NativeLibraryBinary extends NativeBinary {
    FileCollection getHeaderDirs();
    FileCollection getLinkFiles();
    FileCollection getRuntimeFiles();
}

import org.gradle.platform.base.Library;

@Incubating
public interface NativeLibrary extends Library {
}



model {
    toolChains {
        //Explicit configuration of Visual Studio installation directory
        visualCpp(VisualCpp) {
            installDir "D:/Programs/Microsoft Visual Studio 10.0"
        }
    }
}

API:
https://docs.gradle.org/current/javadoc/org/gradle/nativeplatform/toolchain/NativeToolChain.html
https://docs.gradle.org/current/javadoc/org/gradle/nativeplatform/toolchain/VisualCpp.html
https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/util/PatternFilterable.html

DSL:
https://docs.gradle.org/current/dsl/org.gradle.nativeplatform.SharedLibraryBinarySpec.html

src:
gradle\subprojects\platform-native

Tasks:

SharedLibrary and StaticLibrary tasks are lifecycle tasks - such task does not define outputs but is a kind of task that is used to define dependency on it.
For instance check from java plugin task is a kind of such task. 

components
    list "build components" (for Native plugins)

Source sets
    C++ source 'cld2:cpp'
        srcDir: src\cld2\internal
        includes: debug.cc, generated_ulscript.cc, ...

Binaries
    Shared library 'cld2:sharedLibrary'
        build using task: :cld2SharedLibrary
        build type: build type 'release'
        flavor: flavor 'default'
        target platform: platform 'windows_x86'
        tool chain: Tool chain 'visualCpp' (Visual Studio)
        shared library file: build\libs\cld2\shared\cld2.dll
    Static library 'cld2:staticLibrary'
        build using task: :cld2StaticLibrary
        build type: build type 'release'
        flavor: flavor 'default'
        target platform: platform 'windows_x86'
        tool chain: Tool chain 'visualCpp' (Visual Studio)
        static library file: build\libs\cld2\static\cld2.lib
