Git manages tags/refs, pointing to the commit-objects, organized in a DAG-graph of trees, consisting of the smaller-trees and file-blobs objects (sometimes moved to a packs)

Articles
http://jaxenter.com/git-is-simple-on-the-inside-49426.html
http://wildlyinaccurate.com/a-hackers-guide-to-git

Presentations
http://talks.rosalab.com/20140823-05
https://speakerdeck.com/matthewmccullough/git-graphs-hashes-and-compression-oh-my-1 (http://youtu.be/ig5E8CcdM9g)
http://www.slideshare.net/chacon/git-101-presentation
http://www.slideshare.net/chacon/getting-git
  Slide 78 - Object database format

http://www.infoq.com/presentations/A-Tale-of-Three-Trees
  working-dir, index/staging, repo/head

man:
git everyday


PS and autocomplete:
http://habrahabr.ru/sandbox/65572/
https://github.com/git/git/tree/master/contrib/git-jump
http://mediadoneright.com/content/ultimate-git-ps1-bash-prompt

prompt and completion:
export PS1='\[\e[01;32m\]\u\[\e[01;34m\]::\[\e[01;31m\]\h \[\e[00;34m\]{ \[\e[01;34m\]\w \[\e[00;34m\]}\[\e[01;32m\]-> \[\e[00m\]'
if [ -f /usr/share/git/completion/git-completion.bash ]; then
  export GIT_PS1_SHOWDIRTYSTATE=true
  source /usr/share/git/completion/git-completion.bash
  source /usr/share/git/completion/git-prompt.sh
  export PS1='\[\e[01;32m\]\u\[\e[01;34m\]::\[\e[01;31m\]\h \[\e[00;34m\]{ \[\e[01;34m\]\w\[\e[00;34m\]$(__git_ps1) }\[\e[01;32m\]-> \[\e[00m\]'
fi


Env vars:
GIT_DIR
  path to the .git dir



git fsck --full --strict
	to check the repo-validity

git rev-parse <human-hash>
	[pick out and massage parameters]
	to get a sys-id (long) from a human-readable (short) form

git rev-parse 'master^{tree}'
	.. commit tree

git describe --tags master
git describe --tags HEAD
	describe (find nearest tag) non-annotated tag


Diff/patches
git diff
    apply
    format-patch -o patches origin
                 origin/master --stdout > story.patch
    send-patch --to list@email.com patches
    am < story.patch

git diff --cached
  look what will be included into commit  


git gc



ARCHIVING:

git archive -o latest.zip HEAD

RECOVERING
http://blog.ctp.com/2013/11/21/git-recovering-from-mistakes/

UNSTAGING:

git rm --cached database.yml
  remove from staging, leaving it at work-dir (to be added to .gitignore later)
