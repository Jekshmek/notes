https://www.atlassian.com/git/tutorials/git-log/formatting-log-output

git log
    --all
        from all the branches
    --all --simplify-by-decoration
        show only commits that are tagged, branched, etc

    --oneline
        single-line log
    --graph
        log in a graph form
    --decorate
        add a ref-names to the tree
    --pretty="%h, %cn, %cr"
        pretty-printed log accrording to the specified format
        https://www.kernel.org/pub/software/scm/git/docs/git-log.html#_pretty_formats

        %cn - committer name
        %h  - hash
        %cd - commit date
        %cr - commit date relative

    --patch <filename>
        show history of a single file
    --stat   ...
        files + statistics (number of changed files, number of changed/deleted/modified lines)

    -S'msg' [--patch]
        search commit history for a word/phrase (--patch for statistics)

    -p
        includes the diff on the file at each commit


git log HEAD^
    except the top-one commit (HEAD)
git log HEAD~3
    except the top 3 commits
git log <branch1>..<branch2> --oneline
    difference between branch1 and branch2
git log <branch>..
    changes made locally, but not pushed
git log ..<remote-branch>
    ???


git log
    --no-merges
    --name-status
        list modified files

git log -1 --pretty=format:%H
for /f "delims=" %%a in ('git log -1 "--pretty=format:%%H"') do echo %%a

git log -p
    commit history with changes (diff)


we can combine ... --oneline --graph --all --decorate

git shortlog
    Summarizes git log output in a format suitable for inclusion in release announcements. Each commit will be grouped by author and title.

    -n
        to sort by the number of commits per author


